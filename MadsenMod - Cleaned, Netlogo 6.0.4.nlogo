;; 2D representation of conspiracy theorist rationale
;; Original Creators: Toby D. Pilditch & Dr. Jens Madsen

;; Modified by Peter Thramkrongart and Asger L. Christiansen, 2020, with permission of the authors listed above.

;; List of modifications:

; Removed vestigial code; variables, breeds, etc. that is never called.
; Removed Anti-Confirmatory agents.
; Introduced a variable (always-search-YN), which if true makse agents search at every tick, rather than randomly based on confidence (as in the original code)
; Introduced a censorship parameter (censorship-mod) which prevents agents from sampling information from agents labelled as 'extremists' (defined by censorship-mod)
  ;; Importantly, if censorship-mod = 0, the model runs without censorship

;;===================================================
;; VARIABLE DEFINITIONS
;;===================================================

globals[;; global descriptive statistics

  ;; GENERAL VALUES FOR ALL AGENTS
  glob-prior ;; value for the global mean belief-state (see 'prior-val' below)
  glob-sd ;; standard deviation of the global distribution of agents' beliefs
  glob-var ;; variance of the global distribution of agents' beliefs, AKA glob-sd^2
  glob-p-h ;; value for global P(H|E), the mean belief confidence of all agents (see 'my-p-h' below)
  glob-p-h-sd ;; Standard deviation of glob-p-h (i.e., how varied in their confidents are agents at a given tick?)
  glob-p-h-var ;; Variance of glob-p-h (glob-p-h-sd ^ 2)
  glob-purity ;; measure for average difference between link-neighbors (i.e. how "pure" networks are, see 'my-purity' below)
  glob-conn-av ;; global average of agent connections; how many connections agents have on average at a given time point


  ;; VARIABLES FOR "EXTREMIST" AGENT SUBGROUP:
  ext-glob-prior ;; value for the global belief-state of extremists.
  ext-glob-p-h ;; value for global P(H|E) of extremists.
  ext-glob-purity ;; measure for average difference between link-neighbors (i.e. how "pure" networks are)
  ext-glob-conn-av ;; average connectivity of extremist agents.
  ext-glob-num ;; number of agents currently flagged as extremists.
  ]


turtles-own[ ;; Variables that each agent possesses

  ;; learning algorithm section of variables
  prior-val ;; value for the turtle's current hypothesis (prior belief). prior-val is updated every time the agent receives new evidence (see 'curve-update-bayes' below).
  prior-hist ;; storage of all events seen, including both initial sampling and evidence acquired from other agents.
  prior-hist-size ;; numeric value for the amount of evidence the agent has gathered (increases by one each time the agent receives an update)
  prior-dist-l ;; lower threshold for acceptable beliefs (range around prior for each agent)
  prior-dist-h ;; upper threshold for acceptable beliefs (range around prior for each agent)
  my-p-h ;; probability value describing agents assessment of their hypothesis (I have the correct distribution) being true. Continuously updated as evidence accumulates.
  my-purity ;; agent's own "purity" assessment (average of differences between agents own belief state, and that of her linked neighbours)
  success-evidence ;; counter for number of times agent successfully engaged another agent (i.e. found evidence)

  ;; Connection number variables
  conn-list ; list containing, for each tick, the agents number of connections
  conn-av ; average number of connections across time / all ticks
  ;; Scale free variables
  SF-weight ;; variable generated by the final number of links post-setup in a scale free network, indicating a node's "influence".
  ]
;;===================================================
;; FUNCTIONAL PROCEDURES
;;===================================================

to go ;; The main model loop. Converges at glob-p-h = 1, when all agents believe uniformly in their own hypothesis.

  if glob-p-h >= 1 ;;If all agents are 100% convinced of the truth of their belief, force end-state
    [ stop ]

  ifelse broadcast-freq > 0[ ;; If "broadcasting" is "on"
  ifelse remainder ticks broadcast-freq = 0 ;; check if this is a timepoint when a broadcast is due
  [ ;; if true, turtles receive broadcast and update accordingly (see 'receive-broadcast' below). Importantly, agents do not do ordinary belief update on the same tick they receive a broadcast.
   ask turtles[ receive-broadcast ]
  ][ ;; if false, run search and update as normal (see the corresponding functions below)
      ; Ask all agents to search (if confidence =/= 100%)
  ask turtles
    [ if my-p-h < 1
      [search]
      ]
      ; Ask all agents to update based on current network (if confidence =/= 100%)
  ask turtles
    [ if my-p-h < 1
      [update]
    ]
  ]
  ][ ;; If broadcasting is NOT "on", then do regular search and updates only:
  ; Ask all agents to search (if confidence =/= 100%)
  ask turtles
    [ if my-p-h < 1
      [search]
      ]
  ; Ask all agents to update based on current network (if confidence =/= 100%)
  ask turtles
    [ if my-p-h < 1
      [update]
    ]
  ]

;; Asking all agents to assess the purity of their own networks (see 'assess-purity' below)
  ask turtles
    [ assess-purity
      set conn-list lput (count other turtles in-radius ((search-distance * (sqrt ((world-width ^ 2) + (world-height ^ 2)))) / 100)) conn-list
      set conn-av mean conn-list]

;; Asking all agents to prune their network connections (see 'prune' below), removing those the agent considers too extreme
  ask turtles
    [ if prune-sd-mod != 0 ; if prune-sd-mod = 0, agents are purely stochastic, and do not prune
      [prune] ]

;; Updating global variables at the end of tick

  set glob-prior mean [prior-val] of turtles
  set glob-sd standard-deviation [prior-val] of turtles
  set glob-var (glob-sd ^ 2)
  set glob-p-h mean [my-p-h] of turtles
  set glob-p-h-sd standard-deviation [my-p-h] of turtles
  set glob-p-h-var (glob-p-h-sd ^ 2)
  set glob-purity mean [my-purity] of turtles
  set glob-conn-av mean [conn-av] of turtles

;; Checking the number of extremist agents, if any
  let ext-list turtles with [(prior-val > (glob-prior + (glob-sd * extremist-SD))) or (prior-val < (glob-prior - (glob-sd * extremist-SD)))]
  set ext-glob-num count ext-list ;; Updating number of extremist agents.


  ifelse any? ext-list = TRUE [ ;; If there are any extremist agents left, update extremist-specific global variables.
  set ext-glob-prior mean [prior-val] of turtles with [(prior-val > (glob-prior + (glob-sd * extremist-SD))) or (prior-val < (glob-prior - (glob-sd * extremist-SD)))]
  set ext-glob-p-h mean [my-p-h] of turtles with [(prior-val > (glob-prior + (glob-sd * extremist-SD))) or (prior-val < (glob-prior - (glob-sd * extremist-SD)))]
  set ext-glob-purity mean [my-purity] of turtles with [(prior-val > (glob-prior + (glob-sd * extremist-SD))) or (prior-val < (glob-prior - (glob-sd * extremist-SD)))]
  set ext-glob-conn-av mean [conn-av] of turtles with [(prior-val > (glob-prior + (glob-sd * extremist-SD))) or (prior-val < (glob-prior - (glob-sd * extremist-SD)))]
  ]
  [ ;; If there are no extremists at the end of tick, set extremist-specific global values to 0
  set ext-glob-prior 0
  set ext-glob-p-h 0
  set ext-glob-purity 0
  set ext-glob-conn-av 0
  ]

  tick ;; Increments one tick, causing "go" to run again.
end

to assess-purity
  if link-neighbors != nobody ;checking not to run following code on those not belonging to a network
      [let temp-purity-list [prior-val] of link-neighbors ;list of prior-vals of an agent's neighbors
       let loop-count 0 ;set up for loop
       let temp-d-list [] ;set up for difference list
       if length temp-purity-list > 0[
       foreach temp-purity-list
       [ var1 -> set temp-d-list lput (sqrt((prior-val - var1) ^ 2)) temp-d-list ]
       set my-purity 1 - mean temp-d-list
       ]
      ]
end


to search
;;; finding likeminded individuals and forming links

;; conditional based on confidence indicating whether agent will bother to search (low chance of searching the higher the confidence)
let search-chance (random 100)

if always-search-YN = TRUE[ ;; If always search is "on", set search chance to 100.
  set search-chance 100]

if search-chance > (my-p-h * 100)[ ;Depending on search parameter, agent may or may not search if confident enough. Agents will never search if 100% confident.

;; SETTING UP SEARCH CRITERIA:
; agents search for all other agents within range who meet criteria. These criteria are based on current "acceptable" distribution around the agent's prior-val

; defining upper and lower search criteria:
let temp-p-d-l prior-dist-l ;; setting a local search criteria based on agent's lower acceptance threshold
let temp-p-d-h prior-dist-h ;; setting a local search criteria based on agent's higher acceptance threshold

; define all agents within search radius
let near-all min-n-of ((numLearners * (search-distance / 100)) - 1) (other turtles) [ distance myself ]

;;setting up variables for nearby acceptable agents (near-ac), meaning agents within search-dist
let near-ac [] ;; agentset of acceptable agents within reach.
let near-ac-num 0 ;; amount of nearly acceptable agents.

;; setting up censorship variables

set glob-prior mean [prior-val] of turtles ;; Define the global prior. Censorship disallows beliefs that are too distant from the global prior.

set glob-sd standard-deviation [prior-val] of turtles ;; Define standard deviation of global belief distribution.

let censor-search (censorship-mod * glob-sd) ;; define a censorship value for agent search, based on glob-sd and censorship-mod (Specified in model interface)

let upper-censor-search (glob-prior + censor-search) ;; upper censorship bound
let lower-censor-search (glob-prior - censor-search) ;; lower censorship bound


;;;; AGENT SEARCH

;; APPLY PRUNING CRITERIA TO SEARCH

ifelse prune-sd-mod != 0
[ ;; If using confirmatory (non-random) search, agents will only make connections to agents that fall within their acceptable range of beliefs.

  let near-above near-all with [prior-val > temp-p-d-l] ;;subset of agents above lower prior-val threshold for searcher
  set near-ac near-above with [prior-val < temp-p-d-h] ;; subset of agents within upper and lower prior-val bounds of searcher
]
[ ;; if prune-sd-mod = 0, agents will not apply pruning to search, but instead search randomly.
  set near-ac near-all ;; all neighbours within reach are acceptable
]

;; CENSORSHIP
if censorship-mod != 0[ ;; If censorship is "on", apply censorship parameters to near-ac
  let censor-upper near-ac with [prior-val < upper-censor-search]
  let censored censor-upper with [prior-val > lower-censor-search]
  set near-ac censored
]

set near-ac-num count near-ac ;;counts number of suitable agents, with or without censorship.

ifelse near-ac-num > 0
[ let chosen self
  ifelse SF-setup-YN = true
  [ ;;; For Scale-free network, from the "suitable" agent pool, need to then select based off suitable LINK-ENDS.
    ;;; In this way, preferential attachment is given to agents with more links (i.e. more connected), in line with power law expectancies.
    ; Creating link-set, based on the links of suitable agents:
    let suit-links link-set [my-links] of near-ac
    ; Selecting a link-end, based on the suitable link-set:
    ;;; This is essentially the same code as preferential attachment, but restricted to "suitable" agents
    while [member? chosen near-ac = false][ ;; while loop prevents the selected agent being "unsuitable" accidentally (including asking agent)
    ifelse count suit-links > 0 ;;What if none of my acceptable agents have any links?
    [set chosen [one-of both-ends] of one-of suit-links]
    [set chosen one-of near-ac] ;;... then pick one randomly (i.e. I have no preferential attachment in this situation)
    ]
  ]
  [ ;;; For Random network, as search only needs to be distance based, select one agent randomly
  ;; randomly selecting agent from above agent-set
  set chosen one-of near-ac ;randomly selected acceptable agent
  ]
  let temp-link-col ((prior-val * 100) + 10) ; setting anticipated link color (temp placeholder for link call) based on "linkers" prior-val
ifelse link-with chosen != nobody
[;; if the two are already linked, strengthen link
ask link-with chosen
  [ let old-thick thickness
    set thickness (old-thick + 0.01)
    ] ;;thickens link between "acquaintances"
][
;; create new link
create-link-with chosen
ask link-with chosen
  [ set color temp-link-col
    set thickness 0.1] ;;thickens link between "acquaintances"


]
set success-evidence (success-evidence + 1)
];; IF NO-ONE IS ACCEPTABLE, DECREASE CONFIDENCE FOR THIS ROUND (and thus lower my standards for next round)
[
set success-evidence 0
;; arbitrary spreading of confidence interval functionality for now

;; Although we could update my-p-h to reflect that my perceived likelihood of my belief being right should decrease, the next searching round will already do that.
;; for example, if there is noone with my (extreme belief), I have to widen my search for what may be acceptable. I then find (in the next round) some new evidence that
;; technically fits into my acceptable range, but P(E) may now outweigh P(E|H) - i.e. the dictated likelihood will reduce my-p-h for that round. This also means if I did then encounter someone who had shifted into
;; my range, and was closer to my original value, then I should receive a positive update (i.e. "I was right all along").

set prior-hist lput .01 prior-hist
set prior-hist lput .99 prior-hist
let temp-p-sd standard-deviation prior-hist ;; generating the standard deviation of the prior history (around the mean)
set prior-dist-l prior-val - (prune-sd-mod * temp-p-sd) ;; lower acceptance bound - using manipulated SD range
set prior-dist-h prior-val + (prune-sd-mod * temp-p-sd) ;; upper acceptance bound - using manipulated SD range


]
]
end



to receive-broadcast
;; procedure for "God" to speak to agents.

set prior-hist filter is-number? prior-hist
let temp-p-sd standard-deviation prior-hist

;;; Evaluating "broadcast message" in light of my current belief-state, leading to an updating probability of my having the "true" belief-state
set my-p-h curve-integrate-bayes my-p-h prior-val temp-p-sd broadcast-val
;; cap on my-p-h @ 1
if my-p-h > 1
[set my-p-h 1]

;;; Updating the agent's distribution, given the broadcast value:
set prior-hist lput broadcast-val prior-hist;; adding the experienced event to agent's history
set prior-hist-size (prior-hist-size + 1)
;;ifelse (length prior-hist) > 1
set prior-hist filter is-number? prior-hist
set prior-val mean prior-hist ;; New prior...

if prior-val > 1 ;;upper cap
[set prior-val 1];
if prior-val < 0 ;;lower cap
[set prior-val 0.01]

set temp-p-sd standard-deviation prior-hist ;; generating the standard deviation of the prior history (around the mean)


;;regular agent prune / search distance update:
set prior-dist-l prior-val - (prune-sd-mod * temp-p-sd) ;; lower acceptance bound - using manipulated SD range
set prior-dist-h prior-val + (prune-sd-mod * temp-p-sd) ;; upper acceptance bound - using manipulated SD range

;;update colour saturation based on prior
set color ((prior-val * 100) + 10)


end



to update
;;; procedure for agents to Belief-state, Search parameters, and P(H|E).

;; CENSORSHIP VARIABLES:

set glob-prior mean [prior-val] of turtles
let temp-censor-SD standard-deviation [prior-val] of turtles ; This is the SD value that will be used for censorship too!

let censor-mod (censorship-mod * temp-censor-SD) ;;
let upper-censor (glob-prior + censor-mod) ;censorship-mod) ; censorship upper bound ;;
let lower-censor (glob-prior - censor-mod) ;; censorship lower bound ;;

;; Make a subset of non-censored agents out of current network (renamed 'present-network' for safety's sake)

let present-network link-neighbors
let censored-network-a present-network with [prior-val > lower-censor] ;;subset of agents above lower prior-val threshold for pruner
let censored-network-b censored-network-a with [prior-val < upper-censor] ;;subset of agents within upper and lower prior-val bounds of prune

if success-evidence >= 1[ ;;preventing those without any associates getting double penalized

if link-neighbors != nobody[
;;update prior parameter SIMPLIFICATION: (based on average of link-neighbours - involves localisation to what the agent themselves perceives, rather than degrees of association)
let nb-average 1

;; CENSORSHIP INTERVENTION

ifelse censorship-mod != 0
[ ; If censorship is true, run this chunk
ifelse (count censored-network-b) > 1
[set nb-average one-of [prior-val] of censored-network-b] ; perceived network average (change between mean, or one-of)
[set nb-average [prior-val] of censored-network-b]
] ;; End of censorship chunk. nb-average has been set to a value.
[ ; If censorship isn't true, run this chunk instead.
ifelse (count link-neighbors) > 1
[set nb-average one-of [prior-val] of link-neighbors] ; perceived network average (change between mean, or one-of)
[set nb-average [prior-val] of link-neighbors]
] ; With any influence of censorship now handled and incorported into nb-average, run update as normal:

set prior-hist filter is-number? prior-hist
let temp-p-sd standard-deviation prior-hist
let nb-final 1

if (is-list? nb-average = FALSE) or (is-list? nb-average and length nb-average >= 1)[

ifelse is-list? nb-average
[set nb-final item 0 nb-average]
[set nb-final nb-average]

;;; Evaluating "new" evidence in light of my current belief-state, leading to an updating probability of my having the "true" belief-state
set my-p-h curve-integrate-bayes my-p-h prior-val temp-p-sd nb-final
;; cap on my-p-h @ 1
if my-p-h > 1
[set my-p-h 1]

;;; Updating the distribution specifics (i.e. the specifics of my belief): Proposed "true value" (prior-val), and acceptable deviation from that value (based on distribution & sd)
set prior-hist lput nb-final prior-hist;; adding the experienced event to agent's history
set prior-hist-size (prior-hist-size + 1)
;;ifelse (length prior-hist) > 1
set prior-hist filter is-number? prior-hist
set prior-val mean prior-hist ;; New prior...

if prior-val > 1 ;;upper cap
[set prior-val 1]
if prior-val < 0 ;;lower cap
[set prior-val 0.01];

]]]

let temp-p-sd standard-deviation prior-hist ;; generating the standard deviation of the prior history (around the mean)

set prior-dist-l prior-val - (prune-sd-mod * temp-p-sd) ;; lower acceptance bound - using manipulated SD range
set prior-dist-h prior-val + (prune-sd-mod * temp-p-sd) ;; upper acceptance bound - using manipulated SD range

;;update colour saturation based on prior
set color ((prior-val * 100) + 10)

end

to-report curve-integrate-bayes[p-h own-mean own-sd new-E]
;;; Calculating impact of received evidence on perceved probability of hypothesis being true;;;
;; Uses two gaussian probability density curves to work out likelihood ratio,
;; one is the true curve, and is used to calulate P(E), the other uses the agent's prior as the mean (and sd?) for the agent's own expected distribution, to get P(E|H)

;; P(E) calc:
let p-e (1 / (prior-sd * sqrt(2 * pi))) * e ^ (-((new-E - .5)^ 2) / (2 * (prior-sd ^ 2))) ;;note: .5 is the true mean for model (if this changes, this needs updating)
;; P(E|H) calc:
let p-e-given-h (1 / (own-sd * sqrt(2 * pi))) * e ^ (-((new-E - own-mean)^ 2) / (2 * (own-sd ^ 2))) ;;note: will have to see how appropriate own-sd is as a variable for this

;; Calculating posterior (P(H|E)):
let p-h-given-e ((p-e-given-h * p-h) / p-e)

report p-h-given-e
end

to prune
;; Pruning mechanism


;;; placeholder for potential link severance behaviours
let prune-sd (prune-sd-mod * standard-deviation prior-hist) ;;manipulatable degree of pruning
let upper-prune (prior-val + prune-sd) ;; grabbing upper bound
let lower-prune (prior-val - prune-sd) ;; grabbing lower bound
;; break ties with all those who are outside bounds method (requires breaking all, and then reforging with acceptable)
let current-network link-neighbors
ask my-links
[die]
let reforged-network-a current-network with [prior-val > lower-prune] ;;subset of agents above lower prior-val threshold for pruner
let reforged-network-b reforged-network-a with [prior-val < upper-prune] ;;subset of agents within upper and lower prior-val bounds of prune
let temp-link-col ((prior-val * 100) + 10)
create-links-with reforged-network-b
ask my-links
  [ set color temp-link-col
    set thickness 0.1]

end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Scale free functionality: Sourced from Preferential Attachment model:
;; Wilensky, U. (2005).  NetLogo Preferential Attachment model.  http://ccl.northwestern.edu/netlogo/models/PreferentialAttachment.  Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

;; used for creating a new node
to make-node [old-node]
  create-turtles 1
  [
    set color red
    if old-node != nobody
      [ create-link-with old-node [ set color green ]
        ;; position the new node near its partner
        move-to old-node
        fd 8
      ]
  ]
end

;; This code is the heart of the "preferential attachment" mechanism
to-report find-partner
  report [one-of both-ends] of one-of links
end

;;;;;;;;;;;;;;
;;; Layout ;;;
;;;;;;;;;;;;;;

;; resize-nodes, change back and forth from size based on degree to a size of 1
to resize-nodes
  ifelse all? turtles [size <= 1]
  [
    ;; a node is a circle with diameter determined by
    ;; the SIZE variable; using SQRT makes the circle's
    ;; area proportional to its degree
    ask turtles [ set size sqrt count link-neighbors ]
  ]
  [
    ask turtles [ set size 1 ]
  ]
end

to layout
  ;; the number 3 here is arbitrary; more repetitions slows down the
  ;; model, but too few gives poor layouts
  repeat 3 [
    ;; Refactoring the link lengths (MODIFY DENSITY HERE?)
    ;; the more turtles we have to fit into the same amount of space,
    ;; the smaller the inputs to layout-spring we'll need to use
    let factor ((sqrt count turtles) / SF-density-mod) ;; Here SF-density-mod influences the distance factor across the network - will impact search function...
    ;; numbers here are arbitrarily chosen for pleasing appearance
    layout-spring turtles links (1 / factor) (7 / factor) (1 / factor)
    display  ;; for smooth animation
  ]
  ;;; Centering network ;;;
  ;; don't bump the edges of the world
  let x-offset max [xcor] of turtles + min [xcor] of turtles
  let y-offset max [ycor] of turtles + min [ycor] of turtles
  ;; big jumps look funny, so only adjust a little each time
  set x-offset limit-magnitude x-offset 0.1
  set y-offset limit-magnitude y-offset 0.1
  ask turtles [ setxy (xcor - x-offset / 2) (ycor - y-offset / 2) ]
end

to-report limit-magnitude [number limit]
  if number > limit [ report limit ]
  if number < (- limit) [ report (- limit) ]
  report number
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to setup
  ;; set up and calls to various initialization procedures from here.
  clear-all

  ifelse SF-setup-YN = TRUE[;; Scale free network setup
  ;; make the initial network of two turtles and an edge
  make-node nobody        ;; first node, unattached
  make-node turtle 0      ;; second node, attached to first node
  let SF-create-count 2
  while [SF-create-count < numLearners] ;;loop for generating scale-free network
  [ask links [ set color gray ]
  make-node find-partner
  layout
  set SF-create-count (SF-create-count + 1)
  ]
  ;;afterward all nodes generated, ask them to setup priors etc as before (everything except location, and adding SF-weight)
  ask turtles
     [set shape "circle"
      set size .5
      ;; setting the initial prior for each
      set prior-val 0
      set prior-hist [] ;; empty list for agent's "history"
      let ph-count 0
      while [ph-count < prior-sample-size] ;;loop for generating "history"
      [let prior-place 101 ;; placeholder to ensure while loop is accessed
      while [(prior-place > 100) or (prior-place < 1)] ;; ensures the distribution is confined between 1 and 100
      [ set prior-place random-normal 50 (prior-sd * 100)] ;; generating an event from distribution
      set prior-hist lput (prior-place / 100) prior-hist;; adding the experienced event to agent's history
      set ph-count (ph-count + 1)]
      set prior-hist-size prior-sample-size ;;fixing a sample size for use in updating
      ;; Calculating mean (i.e. prior value) and confidence interval from prior history:
      ;; Mean:
      set prior-val mean prior-hist
      let temp-p-sd standard-deviation prior-hist ;; generating the standard deviation of the prior history (around the mean)
      ;; creating the confidence interval (currently a 95% confidence interval, assuming a normal distribution:
      set prior-dist-l prior-val - (prune-sd-mod * temp-p-sd) ;; lower acceptance bound - using manipulated SD range
      set prior-dist-h prior-val + (prune-sd-mod * temp-p-sd) ;; upper acceptance bound - using manipulated SD range
      ;; setting initial agent perceived likelihood of their belief being correct
      set my-p-h agent-prior ;;for now this is fixed, but set up could have this gtow organically during initial sampling (would need a temp sd value until enough pieces of evidence have been collated)
      ;; setting the colour and saturation based on prior and confidence
      set color ((prior-val * 100) + 10)
      ;; Adding a SF-weighting factor for "influence"
      set SF-weight count link-neighbors
      ;; setting connection recording variables
      set conn-list []
      set conn-av 0
      ]
   ;; Severing "builder" links
   ;ask links
   ;[die]

  ]
  [;; Standard (stochastic) network setup
  ;;create learner agents, based on numLearners variable
  create-turtles numLearners
    [ setxy ((random (2 * max-pxcor)) + min-pxcor)
            ((random (2 * max-pycor)) + min-pycor)
      set shape "circle"
      set size .5
      ;; setting the initial prior for each
      set prior-val 0
      set prior-hist [] ;; empty list for agent's "history"
      let ph-count 0

      while [ph-count < prior-sample-size] ;;loop for generating "history"
      [
      let prior-place 101 ;; placeholder to ensure while loop is accessed
      while [(prior-place > 100) or (prior-place < 1)] ;; ensures the distribution is confined between 1 and 100
      [ set prior-place random-normal 50 (prior-sd * 100)] ;; generating an event from distribution
      set prior-hist lput (prior-place / 100) prior-hist;; adding the experienced event to agent's history
      set ph-count (ph-count + 1)
      ]

      set prior-hist-size prior-sample-size ;;fixing a sample size for use in updating

      ;; Calculating mean (i.e. prior value) and confidence interval from prior history:
      ;; Mean:
      set prior-val mean prior-hist
      let temp-p-sd standard-deviation prior-hist ;; generating the standard deviation of the prior history (around the mean)
      ;; creating the confidence interval (currently a 95% confidence interval, assuming a normal distribution:
      set prior-dist-l prior-val - (prune-sd-mod * temp-p-sd) ;; lower acceptance bound - using manipulated SD range
      set prior-dist-h prior-val + (prune-sd-mod * temp-p-sd) ;; upper acceptance bound - using manipulated SD range

      ;; setting initial agent perceived likelihood of their belief being correct
      set my-p-h agent-prior ;;for now this is fixed, but set up could have this grow organically during initial sampling (would need a temp sd value until enough pieces of evidence have been collated)
      ;; setting the colour and saturation based on prior and confidence
      set color ((prior-val * 100) + 10)
      ;; setting connection recording variables
      set conn-list []
      set conn-av 0
    ]
  ]


  global-initialization
  reset-ticks
end


;;===================================================
;; UTILITY PROCECDURES
;;===================================================

to global-initialization

  ;;;
  set glob-prior mean [prior-val] of turtles
  set glob-p-h mean [my-p-h] of turtles
  set glob-purity mean [my-purity] of turtles
  set glob-conn-av 0

end
@#$#@#$#@
GRAPHICS-WINDOW
607
10
1419
823
-1
-1
4.0
1
10
1
1
1
0
1
1
1
-100
100
-100
100
0
0
1
ticks
30.0

BUTTON
2
25
65
58
NIL
setup
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
71
25
134
58
NIL
go
T
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
141
25
216
58
go once
go
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SLIDER
2
84
143
117
numLearners
numLearners
10
10000
410.0
10
1
NIL
HORIZONTAL

TEXTBOX
6
65
156
83
System Parameterization
11
0.0
1

TEXTBOX
5
195
155
213
Agent Parameterization
11
0.0
1

TEXTBOX
5
214
104
256
Pruning and search
11
0.0
1

TEXTBOX
158
213
285
231
Prior (true) distribution
11
0.0
1

TEXTBOX
5
10
208
28
Initialization and Simulation Commands
11
0.0
1

SLIDER
158
232
305
265
Prior-sd
Prior-sd
0
1
0.25
.01
1
NIL
HORIZONTAL

SLIDER
2
119
142
152
search-distance
search-distance
1
100
30.0
1
1
NIL
HORIZONTAL

PLOT
2
338
304
512
P(H|E)
Time (ticks)
P(H|E)
0.0
10.0
0.0
1.0
true
true
"" ""
PENS
"Global" 1.0 0 -16777216 true "" "plot glob-p-h"
"Extremists" 1.0 0 -2674135 true "" "plot ext-glob-p-h"

PLOT
306
308
595
508
Distribution of Beliefs
Belief States
Frequency
0.0
100.0
0.0
10.0
true
false
"" ""
PENS
"default" 1.0 1 -16777216 true "" "histogram [prior-val * 100] of turtles"

SLIDER
158
268
306
301
prior-sample-size
prior-sample-size
1
200
5.0
1
1
NIL
HORIZONTAL

SLIDER
4
231
140
264
prune-sd-mod
prune-sd-mod
0
5
1.0
.1
1
NIL
HORIZONTAL

SLIDER
2
154
142
187
tick-limit
tick-limit
1
1000
1.0
1
1
NIL
HORIZONTAL

SLIDER
158
303
306
336
agent-prior
agent-prior
0.01
1
0.01
.01
1
NIL
HORIZONTAL

MONITOR
497
10
601
55
NIL
glob-prior
17
1
11

PLOT
306
509
595
711
P(H|E) | Belief State
Belief State
P(H|E)
0.0
100.0
0.0
1.0
true
false
"let list-1 [prior-val * 100] of turtles\nlet list-2 [my-p-h] of turtles\n(foreach list-1 list-2 [ [?1 ?2] -> plotxy ?1 ?2 ])" "clear-plot\nlet list-1 [prior-val * 100] of turtles\nlet list-2 [my-p-h] of turtles\n(foreach list-1 list-2 [ [?1 ?2] -> plotxy ?1 ?2 ])"
PENS
"default" 1.0 2 -16777216 true "" ""

PLOT
2
512
304
711
Network Purity
Time (ticks)
Mean Diff in Networks
0.0
10.0
0.0
0.1
true
true
"" ""
PENS
"Global" 1.0 0 -16777216 true "" "plot glob-purity"
"Extremist" 1.0 0 -2674135 true "" "plot ext-glob-purity"

SWITCH
146
82
281
115
SF-setup-YN
SF-setup-YN
0
1
-1000

SLIDER
146
117
281
150
SF-density-mod
SF-density-mod
.1
10
2.5
.1
1
NIL
HORIZONTAL

TEXTBOX
150
66
300
84
Scale Free Parameters
11
0.0
1

MONITOR
437
10
494
55
Turtles
count turtles
17
1
11

PLOT
394
156
594
306
Average Possible Connections
Time (ticks)
Number of Connections
0.0
10.0
0.0
1.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "plot glob-conn-Av"

TEXTBOX
156
152
296
170
Broadcasting
11
0.0
1

SLIDER
144
167
277
200
broadcast-freq
broadcast-freq
0
100
0.0
1
1
NIL
HORIZONTAL

SLIDER
278
167
392
200
broadcast-val
broadcast-val
0
1
0.5
.01
1
NIL
HORIZONTAL

TEXTBOX
10
726
242
755
\"Degree of extremity\" setting for subset selection (SD distance from population mean).
11
0.0
1

SLIDER
11
757
122
790
extremist-SD
extremist-SD
0
5
2.03
.01
1
NIL
HORIZONTAL

SLIDER
284
84
456
117
censorship-mod
censorship-mod
0
2
0.5
0.1
1
NIL
HORIZONTAL

SWITCH
1
302
156
335
always-search-YN
always-search-YN
0
1
-1000

TEXTBOX
5
285
155
303
Random/Always search
11
0.0
1

TEXTBOX
126
760
276
788
(Only for visualization purposes)
11
0.0
1

TEXTBOX
289
51
439
79
Censorship severity (0 disables censorship)
11
0.0
1

@#$#@#$#@
# Concept

A rational account of why some people may end up believing Obama is a Lizard man.

# Overview
Agents form priors from a distribution. They then search out other users based on given rules (reach, confirmatory suitability). Agents form a network with those of acceptable beliefs, and update their own beliefs appropriately. Agents will also then prune their existing networks based on aformentioned suitability. The simulation ends when all agents P(H|E) = 1 (i.e. they are now entirely confident that their version of the world is the true one).

## General Setup
Agents (users) are randomly populated onto a fixed 2d plane.
These agents are all encoded with a bayesian learning model (see "Update Algorithm" below), and generate a prior regarding the state of the world (termed a "Belief-state" but represents the different possible hypotheses - see "Prior Formation (Setup)" below).
The number of users, and the dimensions of the 2d plane may be manipulatedby the modeller. Though it should be noted that "reach" functionality (see "Search Algorithm") is based on Euclidean distance, and thus variance in the density (users per pixel) is likely to impact model results.

**New in this (Version 9) Model**
Functionality now included for all agent's to be spoken to by a "broadcaster".
The value this broadcaster wishes to communicate is controlled by slider "broadcast-val". The frequency of these broadcasts is controlled by "broadcast-freq", where 0 = no broadcasts, 1 = broadcasts every ticks, and 10 = broadcasts every 10 ticks.

Note: In the present version, when agents recieve a broadcast (see "to receive-broadcast" function), the value is automatically added to their distribution (i.e. history), and they update P(H|E) in light of this value. In other words, for the broadcasting ticks, agents are not searching, nor are they randomly selecting a value to update with, based on their established network.

For assessing the impact of these broadcasts, I have added a subset of agents to the key graphs (labelled "Extremists", in red). Whom belongs to this subset is dictated by the slider "extremist-SD", where higher values multiply the distance from the population mean (in SDs) needed to be classified an extremist. This subgroup was added, as taking an overall assessment of agents swallows the potential (desired) impact of broadcasts, given that the majority of agents are perfectly comfortable with broadcasts of 0.5.


## Prior Formation (Setup)
Agents are exposed to evidence which then informs their starting belief-state.
The number of peices of evidence the agents see is manipulated using the "prior-sample-size" slider.
This evidence is generated from a normal distribution (mean = 0.5, SD = manipulated using "Prior-sd" slider; typically .25). Evidence is capped {0,1}, in .01 increments. E.g. An agent exposed to three peices of evidence might be [.34,.78,.45].
Agents store each peice of evidence, forming a distribution. The mean of this distribution is the agent's starting belief-state. The standard deviation of this distribution is used to inform the search algorithm (see below).
In this way, the more evidence agents are exposed to, the more agents will conform according to central limit theorem.

## Scale-Free Setup (and references)

Agent setup follows a scale free network structure.

This is manipulated via SF-setup-YN, and the density of the scale free network is manipulated via the factor SF-density-mod. Recommended value is 2.5.
When turned off, agents are distributed randomly.
When turned on, agents are distributed via the scale free setup (links are severed at the end of the process, leaving only the scale free positioning). Run process remains the same in both cases.

*References for model architecture:*
Sourced from Preferential Attachment model:
Wilensky, U. (2005).  NetLogo Preferential Attachment model.  http://ccl.northwestern.edu/netlogo/models/PreferentialAttachment.  Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.


# Run Procedure
The following procedures (search, update, and prune) are run for all agents once per tick, until the agent reaches a P(H|E) of 1. The simulation ends when all agents reach a P(H|E) of 1.
## Search Algorithm
The distance (physical) agents can search for evidence (i.e. other users) is manipulated using the "search-distance" slider, and is hereafter termed "reach".
Each agent uses their history (distribution) to inform their belief-state (mean) and variance around the belief-state (standard deviation).
This interval (+/- SD around the mean) may then be either widened or narrowed using the "prune-sd-mod" slider.
The interval is used in confirmatory search (this process can be turned off using "con-search-YN" switch, resulting in a stochastic search based solely off reach).
Agents within reach are then subseted into those who possess a belief-state within the accepted range. [Can add rationale behind assumption here.]
Of this subset, the agent selects one agent (selected randomly; and can include a perviously selected agent [Insert rationale behind assumption here.]
The agent then forms a link with this agent.
As agents become more convinced they possess the correct belief-state (I.e. as P(H|E) increases), the likelihood of searching decreases. [Rationale here.]

**Agents who fail to find acceptable candidates**
Those who cannot find a suitable candidate within their reach have their distribution widened (.01 and .99 peices of evidence are added to their distribution). This artificial widening...
P(H|E) is not updated when this happens, as penalization (i.e. reduction in P(H|E) will occur when they are subsequently exposed to the "new" (previously unacceptable) evidence).
Agents who fail to find suitable agents (and thus possess no network connections) are precluded from both updating and pruning alogithms for that time point.

## Update Algorithm
Of an agent's visible network (i.e. those who they are directly connected with), the agent randomly selects *one* of the agents, and samples it's belief-state.
This belief-state sample (or "evidence") is then added to the agent's own distribution, and the new mean (belief-state) is calculated, along with the updated standard deviation (for pruning / search).

P(H|E) Update:
Critically, the new peice of evidence is evaluated using Bayes Theorem to update P(H|E) as follows:
P(H|E) = (P(E|H).P(H))/(P(E)
where P(H) is the agents prior, and the likelihood ratio is calculated using two normal distribution (probability density) curves, as follows:

P(E) = (1 / (prior-sd * sqrt(2 * pi))) * e ^ (-((new-E - True-Mean)^ 2) / (2 * (prior-sd ^ 2)))
Where new-E is the new peice of evidence, prior-sd is the *true distribution standard deviation* and True-mean is the *true distribution mean*. This yields the probability of that evidence occuring irrespective of an agent's particular belief-state (Hypothesis).

P(E|H) = (1 / (own-sd * sqrt(2 * pi))) * e ^ (-((new-E - own-mean)^ 2) / (2 * (own-sd ^ 2)))
Where new-E is the new peice of evidence, own-sd is the *standard deviation of the agent's belief-state distribution* and own-mean is the *mean of the agent's belief-state distribution*. This yields the probability of that evidence occuring given the agent's particular belief-state (Hypothesis).

In this way, if the evidence is more likely given the agent's hypothesis, the likelihood ratio is >1 and P(H|E) increases. Or if the evidence is less likely given the agent's hypothesis, the likelihood ratio is <1 and P(H|E) decreases.

## Pruning Algorithm
Once the update phase is completed, agents move into the pruning phase.
Agents use the same suitablility range as used in search, but on their pre-existing network.
If an agent on their direct network has a belief-state that now lies outside of the acceptable range given the update procedure, this connection is severed. Agents sever all unacceptable links each pruning phase.

# Diseminator Agents (Anti-confirming; AC-Agents)

Manipulated percentage of agents who seek out contrary beliefs (i.e. the inverse of the confirmatory search function).
Percentage of agents of this type is manipulated via AC-Prcnt.
Degree of search (narrowness of interval for agents considered similar, then used to find the inverse - agents outside of this similarity band) is manipulated via AC-search-SD.

# Behaviours of Interest

## Distribution of Beliefs over Time
How the distribution of belief states changes over time. Notably how much they converge, and inversely how well extremist belief-states are maintained.

## Purity of Networks over Time
Taken as the mean distance of a user from those in their direct network. The lower the number the "purer" each user's network becomes (i.e. less and less disparate belief states among users).

## P(H|E) over Time
How the global (or agent) level of P(H|E) changes over time. Expected to increase, but may have percolation points...

# Recommendations

1. Turning on or off confirmatory search
2. Restricting or Maximising pruning/search acceptability
3. Reducing / Increasing physical reach of agents

# Model Extensions

(suggested things to add or change in the Code tab to make the model more complicated, detailed, accurate, etc.)

# Related Models

- Obama_Lizard series
- Opinion_Cascade series
- BelNet series
- MTC_Voting model

# Credits and References

Model Written by Toby D. Pilditch (UCL)

Concept design and surrounding work by Jens Koed Madsen (Oxford), Richard Bailey (Oxford), and Toby D. Pilditch (UCL)
@#$#@#$#@
default
true
0
Polygon -7500403 true true 150 5 40 250 150 205 260 250

airplane
true
0
Polygon -7500403 true true 150 0 135 15 120 60 120 105 15 165 15 195 120 180 135 240 105 270 120 285 150 270 180 285 210 270 165 240 180 180 285 195 285 165 180 105 180 60 165 15

arrow
true
0
Polygon -7500403 true true 150 0 0 150 105 150 105 293 195 293 195 150 300 150

box
false
0
Polygon -7500403 true true 150 285 285 225 285 75 150 135
Polygon -7500403 true true 150 135 15 75 150 15 285 75
Polygon -7500403 true true 15 75 15 225 150 285 150 135
Line -16777216 false 150 285 150 135
Line -16777216 false 150 135 15 75
Line -16777216 false 150 135 285 75

bug
true
0
Circle -7500403 true true 96 182 108
Circle -7500403 true true 110 127 80
Circle -7500403 true true 110 75 80
Line -7500403 true 150 100 80 30
Line -7500403 true 150 100 220 30

butterfly
true
0
Polygon -7500403 true true 150 165 209 199 225 225 225 255 195 270 165 255 150 240
Polygon -7500403 true true 150 165 89 198 75 225 75 255 105 270 135 255 150 240
Polygon -7500403 true true 139 148 100 105 55 90 25 90 10 105 10 135 25 180 40 195 85 194 139 163
Polygon -7500403 true true 162 150 200 105 245 90 275 90 290 105 290 135 275 180 260 195 215 195 162 165
Polygon -16777216 true false 150 255 135 225 120 150 135 120 150 105 165 120 180 150 165 225
Circle -16777216 true false 135 90 30
Line -16777216 false 150 105 195 60
Line -16777216 false 150 105 105 60

car
false
0
Polygon -7500403 true true 300 180 279 164 261 144 240 135 226 132 213 106 203 84 185 63 159 50 135 50 75 60 0 150 0 165 0 225 300 225 300 180
Circle -16777216 true false 180 180 90
Circle -16777216 true false 30 180 90
Polygon -16777216 true false 162 80 132 78 134 135 209 135 194 105 189 96 180 89
Circle -7500403 true true 47 195 58
Circle -7500403 true true 195 195 58

circle
false
0
Circle -7500403 true true 0 0 300

circle 2
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240

cow
false
0
Polygon -7500403 true true 200 193 197 249 179 249 177 196 166 187 140 189 93 191 78 179 72 211 49 209 48 181 37 149 25 120 25 89 45 72 103 84 179 75 198 76 252 64 272 81 293 103 285 121 255 121 242 118 224 167
Polygon -7500403 true true 73 210 86 251 62 249 48 208
Polygon -7500403 true true 25 114 16 195 9 204 23 213 25 200 39 123

cylinder
false
0
Circle -7500403 true true 0 0 300

dot
false
0
Circle -7500403 true true 90 90 120

face happy
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 255 90 239 62 213 47 191 67 179 90 203 109 218 150 225 192 218 210 203 227 181 251 194 236 217 212 240

face neutral
false
0
Circle -7500403 true true 8 7 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Rectangle -16777216 true false 60 195 240 225

face sad
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 168 90 184 62 210 47 232 67 244 90 220 109 205 150 198 192 205 210 220 227 242 251 229 236 206 212 183

fish
false
0
Polygon -1 true false 44 131 21 87 15 86 0 120 15 150 0 180 13 214 20 212 45 166
Polygon -1 true false 135 195 119 235 95 218 76 210 46 204 60 165
Polygon -1 true false 75 45 83 77 71 103 86 114 166 78 135 60
Polygon -7500403 true true 30 136 151 77 226 81 280 119 292 146 292 160 287 170 270 195 195 210 151 212 30 166
Circle -16777216 true false 215 106 30

flag
false
0
Rectangle -7500403 true true 60 15 75 300
Polygon -7500403 true true 90 150 270 90 90 30
Line -7500403 true 75 135 90 135
Line -7500403 true 75 45 90 45

flower
false
0
Polygon -10899396 true false 135 120 165 165 180 210 180 240 150 300 165 300 195 240 195 195 165 135
Circle -7500403 true true 85 132 38
Circle -7500403 true true 130 147 38
Circle -7500403 true true 192 85 38
Circle -7500403 true true 85 40 38
Circle -7500403 true true 177 40 38
Circle -7500403 true true 177 132 38
Circle -7500403 true true 70 85 38
Circle -7500403 true true 130 25 38
Circle -7500403 true true 96 51 108
Circle -16777216 true false 113 68 74
Polygon -10899396 true false 189 233 219 188 249 173 279 188 234 218
Polygon -10899396 true false 180 255 150 210 105 210 75 240 135 240

house
false
0
Rectangle -7500403 true true 45 120 255 285
Rectangle -16777216 true false 120 210 180 285
Polygon -7500403 true true 15 120 150 15 285 120
Line -16777216 false 30 120 270 120

leaf
false
0
Polygon -7500403 true true 150 210 135 195 120 210 60 210 30 195 60 180 60 165 15 135 30 120 15 105 40 104 45 90 60 90 90 105 105 120 120 120 105 60 120 60 135 30 150 15 165 30 180 60 195 60 180 120 195 120 210 105 240 90 255 90 263 104 285 105 270 120 285 135 240 165 240 180 270 195 240 210 180 210 165 195
Polygon -7500403 true true 135 195 135 240 120 255 105 255 105 285 135 285 165 240 165 195

line
true
0
Line -7500403 true 150 0 150 300

line half
true
0
Line -7500403 true 150 0 150 150

pentagon
false
0
Polygon -7500403 true true 150 15 15 120 60 285 240 285 285 120

person
false
0
Circle -7500403 true true 110 5 80
Polygon -7500403 true true 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Rectangle -7500403 true true 127 79 172 94
Polygon -7500403 true true 195 90 240 150 225 180 165 105
Polygon -7500403 true true 105 90 60 150 75 180 135 105

plant
false
0
Rectangle -7500403 true true 135 90 165 300
Polygon -7500403 true true 135 255 90 210 45 195 75 255 135 285
Polygon -7500403 true true 165 255 210 210 255 195 225 255 165 285
Polygon -7500403 true true 135 180 90 135 45 120 75 180 135 210
Polygon -7500403 true true 165 180 165 210 225 180 255 120 210 135
Polygon -7500403 true true 135 105 90 60 45 45 75 105 135 135
Polygon -7500403 true true 165 105 165 135 225 105 255 45 210 60
Polygon -7500403 true true 135 90 120 45 150 15 180 45 165 90

sheep
false
15
Circle -1 true true 203 65 88
Circle -1 true true 70 65 162
Circle -1 true true 150 105 120
Polygon -7500403 true false 218 120 240 165 255 165 278 120
Circle -7500403 true false 214 72 67
Rectangle -1 true true 164 223 179 298
Polygon -1 true true 45 285 30 285 30 240 15 195 45 210
Circle -1 true true 3 83 150
Rectangle -1 true true 65 221 80 296
Polygon -1 true true 195 285 210 285 210 240 240 210 195 210
Polygon -7500403 true false 276 85 285 105 302 99 294 83
Polygon -7500403 true false 219 85 210 105 193 99 201 83

square
false
0
Rectangle -7500403 true true 30 30 270 270

square 2
false
0
Rectangle -7500403 true true 30 30 270 270
Rectangle -16777216 true false 60 60 240 240

star
false
0
Polygon -7500403 true true 151 1 185 108 298 108 207 175 242 282 151 216 59 282 94 175 3 108 116 108

target
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240
Circle -7500403 true true 60 60 180
Circle -16777216 true false 90 90 120
Circle -7500403 true true 120 120 60

tree
false
0
Circle -7500403 true true 118 3 94
Rectangle -6459832 true false 120 195 180 300
Circle -7500403 true true 65 21 108
Circle -7500403 true true 116 41 127
Circle -7500403 true true 45 90 120
Circle -7500403 true true 104 74 152

triangle
false
0
Polygon -7500403 true true 150 30 15 255 285 255

triangle 2
false
0
Polygon -7500403 true true 150 30 15 255 285 255
Polygon -16777216 true false 151 99 225 223 75 224

truck
false
0
Rectangle -7500403 true true 4 45 195 187
Polygon -7500403 true true 296 193 296 150 259 134 244 104 208 104 207 194
Rectangle -1 true false 195 60 195 105
Polygon -16777216 true false 238 112 252 141 219 141 218 112
Circle -16777216 true false 234 174 42
Rectangle -7500403 true true 181 185 214 194
Circle -16777216 true false 144 174 42
Circle -16777216 true false 24 174 42
Circle -7500403 false true 24 174 42
Circle -7500403 false true 144 174 42
Circle -7500403 false true 234 174 42

turtle
true
0
Polygon -10899396 true false 215 204 240 233 246 254 228 266 215 252 193 210
Polygon -10899396 true false 195 90 225 75 245 75 260 89 269 108 261 124 240 105 225 105 210 105
Polygon -10899396 true false 105 90 75 75 55 75 40 89 31 108 39 124 60 105 75 105 90 105
Polygon -10899396 true false 132 85 134 64 107 51 108 17 150 2 192 18 192 52 169 65 172 87
Polygon -10899396 true false 85 204 60 233 54 254 72 266 85 252 107 210
Polygon -7500403 true true 119 75 179 75 209 101 224 135 220 225 175 261 128 261 81 224 74 135 88 99

wheel
false
0
Circle -7500403 true true 3 3 294
Circle -16777216 true false 30 30 240
Line -7500403 true 150 285 150 15
Line -7500403 true 15 150 285 150
Circle -7500403 true true 120 120 60
Line -7500403 true 216 40 79 269
Line -7500403 true 40 84 269 221
Line -7500403 true 40 216 269 79
Line -7500403 true 84 40 221 269

wolf
false
0
Polygon -16777216 true false 253 133 245 131 245 133
Polygon -7500403 true true 2 194 13 197 30 191 38 193 38 205 20 226 20 257 27 265 38 266 40 260 31 253 31 230 60 206 68 198 75 209 66 228 65 243 82 261 84 268 100 267 103 261 77 239 79 231 100 207 98 196 119 201 143 202 160 195 166 210 172 213 173 238 167 251 160 248 154 265 169 264 178 247 186 240 198 260 200 271 217 271 219 262 207 258 195 230 192 198 210 184 227 164 242 144 259 145 284 151 277 141 293 140 299 134 297 127 273 119 270 105
Polygon -7500403 true true -1 195 14 180 36 166 40 153 53 140 82 131 134 133 159 126 188 115 227 108 236 102 238 98 268 86 269 92 281 87 269 103 269 113

x
false
0
Polygon -7500403 true true 270 75 225 30 30 225 75 270
Polygon -7500403 true true 30 75 75 30 270 225 225 270
@#$#@#$#@
NetLogo 6.0.4
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
<experiments>
  <experiment name="experiment" repetitions="10" runMetricsEveryStep="true">
    <setup>setup</setup>
    <go>go</go>
    <metric>(b-agents / numLearners) * 100</metric>
    <metric>(n-b-agents / numLearners) * 100</metric>
    <metric>((sqrt ((tick-tot-odd - tick-tot-even) ^ 2)) / numLearners) * 100</metric>
    <enumeratedValueSet variable="SC-bel-prop">
      <value value="1"/>
      <value value="1.1"/>
      <value value="1.2"/>
      <value value="1.3"/>
      <value value="1.4"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="numLearners">
      <value value="5000"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="res-cave">
      <value value="3"/>
      <value value="4"/>
      <value value="5"/>
      <value value="6"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="CB-mean">
      <value value="0.2"/>
      <value value="0.3"/>
      <value value="0.4"/>
      <value value="0.5"/>
      <value value="0.6"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="SC-com-prop">
      <value value="1"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="numInitBel">
      <value value="1"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="maxLinks">
      <value value="12"/>
    </enumeratedValueSet>
  </experiment>
  <experiment name="search distance" repetitions="50" runMetricsEveryStep="false">
    <setup>setup</setup>
    <go>go</go>
    <timeLimit steps="250"/>
    <metric>mean [prior-val] of turtles</metric>
    <metric>standard-deviation [prior-val] of turtles</metric>
    <metric>mean [glob-conf] of turtles</metric>
    <enumeratedValueSet variable="search-distance">
      <value value="1"/>
      <value value="10"/>
      <value value="25"/>
      <value value="50"/>
      <value value="75"/>
      <value value="100"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="prior-sample-size">
      <value value="15"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="Prior-sd">
      <value value="0.3"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="conf-mean">
      <value value="0.05"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="numLearners">
      <value value="500"/>
    </enumeratedValueSet>
  </experiment>
</experiments>
@#$#@#$#@
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180
@#$#@#$#@
0
@#$#@#$#@
